<!DOCTYPE html>
<meta charset="utf-8">
<style>

.chart_type 
{
    opacity: 0;
    display: none;
    height: 500px;
    position: absolute;
    top: 100px;
}

    .chart_type svg
    {
        height: 500px;
        width: 960px;
    }

.bars rect {
  fill: #D3BCEB;
  stroke: white;
}

.axis text {
  font: 10px sans-serif;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.line {
  fill: none;
  stroke: purple;
  stroke-width: 1.5px;
}

.moving 
{
    stroke: orange;
}

.datum_info
{
    fill: Gray;
    font: 300 40px Helvetica Neue;
}

.shaded 
{
    fill: steelblue;
    fill-opacity:0.5;
}



.box {
  font: 10px sans-serif;
}

.box line,
.box rect,
.box circle {
  fill: #D3BCEB;
  stroke: #000;
  stroke-width: 1.5px;
}

.box .center {
  stroke-dasharray: 3,3;
}

.box .outlier {
  fill: none;
  stroke: #ccc;
}

#chart_options 
{
        position: absolute;
    top: 600px;
}

#chart_options li
{
    display: inline-block;
    padding: 10px 20px;
    margin: 5px;
    /*background: rgba(70, 130, 180, 0.5);*/
    cursor: pointer;
    font-family: Verdana;
    font-size: large;
    color: White;
    font-weight: bold;
    color: steelblue;
    border: Gray dotted 2px;
}

#chart_options li.current
{
    background: #D3BCEB;
    color: White;
}



h1, h2, h3 
{
        font-family: Verdana;
    color: steelblue;
    margin: 20px;
}

h3
{
    color: Gray;
}
</style>

<script src="http://mbostock.github.com/d3/d3.v2.js?2.8.0"></script>
<script src="histogram-chart.js"></script>
<script src="box.js"></script>
<script>

    var margin = { top: 10, right: 50, bottom: 20, left: 50 },
    width = 120 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

    var min = Infinity,
    max = -Infinity;

    var chart = d3.box()
    .whiskers(iqr(1.5))
    .width(width)
    .height(height);

    var numOfTicks = 30;

    d3.csv("hist_data2.csv", function (error, data) {
        var distribution = [];
        var val = +error[0].num;
        var min = val;
        var max = val;
        for (var k in error) {
            val = +error[k].num;
            distribution.push(val);
            if (val > max) max = val;
            if (val < min) min = val;
        }

        d3.select("#hist svg")
        .datum(distribution)
        .call(histogramChart(numOfTicks,"hist")
        .bins(
        d3.scale.linear()
                .domain([min, max])
                .ticks(numOfTicks)
                )
        .tickFormat(d3.format(".02f")));


        d3.select("#cdf svg")
        .datum(distribution)
        .call(histogramChart(numOfTicks, "cdf")
        .bins(
        d3.scale.linear()
                .domain([min, max])
                .ticks(numOfTicks)
                )
        .tickFormat(d3.format(".02f")));


        chart.domain([min, max]);

        var svg = d3.select("#box svg").selectAll("svg")
      .data([distribution])
    .enter().append("svg")
      .attr("class", "box")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.bottom + margin.top)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
      .call(chart);
    });

    

    var svgArray = ["table", "box", "hist", "cdf"];
    var svgArrayPtr = 2;
    //show();


    
    setInterval(show, 1000);

    // Allow the arrow keys to change the displayed year.
    window.focus();
    d3.select(window).on("keydown", function () {
        switch (d3.event.keyCode) {
            case 37: trans(-1); break;
            case 39: trans(+1); break;
        }

    });


    function setHandlers() {
        var chart_options = d3.selectAll("#chart_options li")[0];
        for (var i = 0; i < chart_options.length; i++) {
            chart_options[i].dataIdx = i;
            chart_options[i].onclick = function () { trans(0, this.dataIdx); };
        }
    }

    function trans(add, ptr) {

        hide();
        if (add == 0) {
            svgArrayPtr = ptr;
        } else {
            svgArrayPtr += add;
            svgArrayPtr = (svgArrayPtr < 0) ? svgArray.length - 1 : svgArrayPtr % svgArray.length;
        }
        show();

//        var new_ptr = svgArrayPtr;

//        if (add == 0) {
//            new_ptr = ptr;
//        } else {
//            new_ptr += add;
//            new_ptr = (new_ptr < 0) ? svgArray.length - 1 : new_ptr % svgArray.length;
//        }

//        switch_plots(new_ptr);


//        hide(function () {
//            if (add == 0) {
//                svgArrayPtr = ptr;
//            } else {
//                svgArrayPtr += add;
//                svgArrayPtr = (svgArrayPtr < 0) ? svgArray.length - 1 : svgArrayPtr % svgArray.length;
//            }
//            show();
//        });

    }

    function hide(callback) {

        d3.selectAll("#chart_options li")[0][svgArrayPtr].className = "";

        var element = "#" + svgArray[svgArrayPtr];
        d3.select(element).transition()
                .duration(750)
                .style("opacity", 0)
                .each("end", function () {
                    this.style.display = "none";
                    //callback();
                });
    }

    function show() {
        d3.selectAll("#chart_options li")[0][svgArrayPtr].className = "current";

        var element = "#" + svgArray[svgArrayPtr];

        d3.select(element).transition()
        .duration(750)
        .style("opacity", 1)
        .each("start", function () {
            this.style.display = "block";
        });

    }

//    function switch_plots(new_ptr) {
//        d3.selectAll("#chart_options li")[0][svgArrayPtr].className = "";

//        var element = "#" + svgArray[svgArrayPtr];
//        d3.select(element).transition()
//                .duration(750)
//                .style("opacity", 0)
//                .each("end", function () {
//                    this.style.display = "none";
//                    svgArrayPtr = new_ptr;
//                    show();
//                });

//    }


    // Returns a function to compute the interquartile range.
    function iqr(k) {
        return function (d, i) {
            var q1 = d.quartiles[0],
        q3 = d.quartiles[2],
        iqr = (q3 - q1) * k,
        i = -1,
        j = d.length;
            while (d[++i] < q1 - iqr);
            while (d[--j] > q3 + iqr);
            return [i, j];
        };
    }

</script>

<body onload="setHandlers();">
<h1>Host Memory Utilization</h1>
<h3>OS: Win | Systems Classified By: Host Platform, Cores, MemBucket</h3>
<div>
    <div id="stats" class="chart_type">
        <table><thead><tr><th>Count</th><th>mean</th><th>median</th><th>5%</th><th>95%</th></tr></thead></table>
    </div>
    <div id="box" class="chart_type"><svg></svg></div>
    <div id="hist" class="chart_type"><svg></svg></div>
    <div id="cdf" class="chart_type"><svg></svg></div>
</div>
<ul id="chart_options">
<li>Stats</li>
<li>Box</li>
<li>Histogram</li>
<li>Probability Plot</li>
</ul>
</body>